# 0-add_integer.txt

===========================
How to Use 0-add_integer.py
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

USAGE:

``add_integer(...)`` returns the addition of two arguments as integer.

Import the method to test:
>>> add_integer = __import__('0-add_integer').add_integer

SUCCESS CASES:

Test signed and unsigned ints and floats:

::

     >>> print(add_integer(10, 5))
     15
     >>> print(add_integer(-2, 3))
     1
     >>> print(add_integer(1.7, 3.9))
     4
     >>> print(add_integer(-12.9, 1))
     -11
     >>> print(add_integer(11, -4))
     7

Test use of default b=98 value:

::

     >>> print(add_integer(2))
     100

FAIL CASES:

Test no args:

::

     >>> print(add_integer(None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer
     >>> print(add_integer(None, None))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer

Test extra args:

::

     >>> print(add_integer(1, 2, 3))
     Traceback (most recent call last):
     ...
     TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test other data types:

::

     >>> print(add_integer("orange"))
     Traceback (most recent call last):
     ...
     TypeError: a must be an integer
     >>> print(add_integer(0, [3, 6, 9]))
     Traceback (most recent call last):
     ...
     TypeError: b must be an integer

Test max/min numbers Python can handle ("inf" is infinity):

 ::

     >>> print(add_integer(float("inf")))
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer
     >>> print(add_integer(float("-inf")))
     Traceback (most recent call last):
     ...
     OverflowError: cannot convert float infinity to integer

Test special float NaN in Python (not a number):

::

     >>> print(add_integer(float("NaN")))
     Traceback (most recent call last):
     ...
     ValueError: cannot convert float NaN to integer
