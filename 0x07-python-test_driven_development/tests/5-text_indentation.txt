# 5-text_indentation.txt

================================
How to Use 5-text_indentation.py
================================

This module defines a text-indentation function ``text_indentation(text)``.

USAGE:

Text is printed with two new lines after each of the characters ``.``, ``?``,
and ``:``.

Import the method to test:
>>> text_indentation = __import__('5-text_indentation').text_indentation

SUCCESS CASES:

Test a simple string:

::

    >>> text_indentation("Hello?")
    Hello?
    <BLANKLINE>

Test string with spaces at the beginning of a line:

::

    >>> text_indentation("   Hi there.")
    Hi there.
    <BLANKLINE>

Test string with spaces at the end of a line:

::

    >>> text_indentation("Hello.   ")
    Hello.
    <BLANKLINE>

Test empty string enclosed in spaces:

::

    >>> text_indentation("          ")

Test string with spaces in between:

::

    >>> text_indentation("    Now.    This looks messy.   ")
    Now.
    <BLANKLINE>
    This looks messy.
    <BLANKLINE>

Test string not ending with one of these characters - ``.``, ``?``, and ``:``

::

    >>> text_indentation("Cindy likes to eat her dad and her cat")
    Cindy likes to eat her dad and her cat
    >>> text_indentation("Punctuate, jeez! Cindy likes to eat, her dad, and her cat")
    Punctuate, jeez! Cindy likes to eat, her dad, and her cat

Test newline character within a string:

::

    >>> text_indentation("Let's print a new-line! Here it goes:\nDone.")
    Let's print a new-line! Here it goes:
    <BLANKLINE>
    <BLANKLINE>
    Done.
    <BLANKLINE>

::

    >>> text_indentation("\n\n\n Done printing three newlines.")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    Done printing three newlines.
    <BLANKLINE>

Test a complex example:

::

    >>> text_indentation("Lorem ipsum dolor sit amet, consectetur adipiscing "
    ... "elit. Quonam modo? Utrum igitur tibi litteram videor an totas paginas "
    ... "commovere? Non autem hoc: igitur ne illud quidem. Fortasse id optimum, "
    ... "sed ubi illud: Plus semper voluptatis? Teneo, inquit, finem illi videri "
    ... "nihil dolere. Transfer idem ad modestiam vel temperantiam, quae est "
    ... "moderatio cupiditatum rationi oboediens. Si id dicis, vicimus. Inde "
    ... "sermone vario sex illa a Dipylo stadia confecimus. Sin aliud quid "
    ... "voles, postea. Quae animi affectio suum cuique tribuens atque hanc, "
    ... "quam dico. Utinam quidem dicerent alium alio beatiorem! Iam ruinas "
    ... "videres") # doctest: +NORMALIZE_WHITESPACE
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, 
    quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

FAIL CASES:

The paramter ``text`` must be a string. Otherwise, a TypeError is raised.

Test other data types:

::

    >>> text_indentation(7)
    Traceback (most recent call last):
    TypeError: text must be a string

    >>> text_indentation({"one": 1, "two": 2})
    Traceback (most recent call last):
    TypeError: text must be a string

Test no args:

::

    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string
