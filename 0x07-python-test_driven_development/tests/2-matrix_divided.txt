# 2-matrix_divided.txt

==============================
How to Use 2-matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

USAGE:

``matrix_divided(...)`` returns a new matrix that is a copy of the parameter
``matrix`` with all elements divided by ``div``.

Import the method to test:
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

SUCCESS CASES:

Test signed and unsigned ints and floats in same size lists of list matrix:

::

    >>> matrix = [[3, 6, 9], [12, 15, 18]]
    >>> print(matrix_divided(matrix, 3))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Quotients are rounded to a maximum of two decimal places:

::

    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> matrix = [[1.1, -2.2, 3.3], [4.4, 5.5, -6.6]]
    >>> print(matrix_divided(matrix, 3))
    [[0.37, -0.73, 1.1], [1.47, 1.83, -2.2]]

    >>> matrix = [[1, -2.2, 3, 4.4, 5], [-6.6, 7.00, 8, 9.999, 10]]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, -0.73, 1.0, 1.47, 1.67], [-2.2, 2.33, 2.67, 3.33, 3.33]]

FAIL CASES:

The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

Test empty matrix:

::

    >>> matrix = "not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test an empty list of lists matrix:

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

Test a matrix that is not specifically a list of lists:

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test elements in ``matrix`` that are neither ints nor floats:

::

    >>> matrix = [[1, 2, 3], [4, "not a number", 6]]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test different sized lists:

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Test ``div`` as neither int or float:

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "alphabet"))
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

Test ``div`` as zero:

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero
